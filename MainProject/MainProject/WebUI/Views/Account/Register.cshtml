@using Core.Enums
@model Core.User

@{
    ViewBag.Title = "Register";
    // Layout = "~/Views/Shared/_LayoutPage1.cshtml";
}

<div class="row justify-content-md-center">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                Register
            </div>
            <div class="card-body">
                @using (Html.BeginForm("Register", "Account", FormMethod.Post))
                {
                    <div class="form-group">
                        @Html.LabelFor(m => m.Username)
                        @Html.TextBoxFor(m => m.Username, new { @class = "form-control", @placeholder = "Enter your username" })
                        @if (!string.IsNullOrEmpty(ViewData["UsernameError"] as string))
                        {
                            <span style="color: red;">@ViewData["UsernameError"]</span>
                        }
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Email)
                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @placeholder = "Enter your email" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.PasswordHash)
                        @Html.PasswordFor(m => m.PasswordHash, new { @class = "form-control", @placeholder = "Enter your password" })
                        @if (!string.IsNullOrEmpty(ViewData["PasswordError"] as string))
                        {
                            <span style="color: red;">@ViewData["PasswordError"]</span>
                        }
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.Role)
                        @Html.DropDownListFor(m => m.Role, Enum.GetValues(typeof(UserRole)).Cast<UserRole>().Select(r => new SelectListItem
                        {
                            Text = r.ToString(),
                            Value = r.ToString()
                        }), new { @class = "form-control custom-select" })
                    </div>
                    <button type="submit" class="btn btn-primary">Register</button>
                }
            </div>
        </div>
    </div>
</div>


@* @{ *@
@*     ViewBag.Title = "Register"; *@
@* } *@
@* *@
@* <h2>Register</h2> *@
@* *@
@* *@
@* <div> *@
@*     @using (Html.BeginForm("SaveRegisterDetails", "Account")) *@
@*     { *@
@*         <div style="color:red;">@Html.ValidationSummary()</div> *@
@*         <div class="row"> *@
@*             <!--Show details are saved successfully message--> *@
@*             <div class="col-lg-12">@ViewBag.Message</div> *@
@*         </div><br/> *@
@*         <div class="row"> *@
@*             <div class="col-lg-2">@Html.LabelFor(a => a.Username)</div> *@
@*             <div class="col-lg-10">@Html.TextBoxFor(a => a.Username, new { @class = "form-control" })</div> *@
@*         </div><br /> *@
@*         <div class="row"> *@
@*             <div class="col-lg-2">@Html.LabelFor(a => a.Email)</div> *@
@*             <div class="col-lg-10">@Html.TextBoxFor(a => a.Email, new { @class = "form-control" })</div> *@
@*         </div><br /> *@
@*         <div class="row"> *@
@*             <div class="col-lg-2">@Html.LabelFor(a => a.PasswordHash)</div> *@
@*             <div class="col-lg-10">@Html.TextBoxFor(a => a.PasswordHash, new { @class = "form-control", type = "Password" })</div> *@
@*         </div><br /> *@
@*         <div> * *@
@*                 @Html.LabelFor(m => m.Role) *@
@*                 @Html.DropDownListFor(m => m.Role, Enum.GetValues(typeof(UserRole)).Cast<UserRole>().Select(r => new SelectListItem *@
@*                 { *@
@*                     Text = r.ToString(), *@
@*                     Value = r.ToString() *@
@*                 })) *@
@*             </div> *@
@*         <input type="submit" value="Register" class="btn btn-primary" /> *@
@*     } *@
@* *@
@* </div> *@